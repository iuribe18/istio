# Istio notes
Taught by: Sevi Karakose, Technical Instructor
Istio service mess
This course will let you explore and tackle the challenges developers and operators face with a distributed or microservices architecture with Istio. Istio is an open-source service mesh that lets you connect, monitor, and secure microservices deployed on-premise, in the cloud, or with orchestration platforms like Kubernetes and Mesos. Whether you’re building from scratch or migrating existing applications to cloud native, Istio can help.
Istio lets you program application-aware traffic management, incredible observability, and robust security capabilities into your network. Istio is the path to load balancing, service-to-service authentication, and monitoring – with few or no service code changes. Its powerful control plane brings a variety of vital features which is designed for extensibility and can handle a diverse range of deployment needs. Istio’s control plane runs on Kubernetes, and you can add applications deployed in that cluster to your mesh, extend the mesh to other clusters, or even connect VMs or other endpoints running outside of Kubernetes.
Let us dive into this fully hands-on course with labs for understanding: 
* Monoliths vs Microservices
* Challenges with Microservice Architectures
* How Service Mesh’s solve these challenges
* Introduction to Istio
* Deploying sample application
* Generating Traffic to the application
* Visualizing in Kiali Dashboard
* Understanding Istio Architecture
* Gateway, Timeouts, Fault Injection
* Monitoring with Prometheus and Grafana
* Distributed Tracing with Jaeger

## Monoliths and Microservices
AntiPattern: A BIG BALL OF MUD is haphazardly structured, sprawling, sloppy, duct-tape and bailing wire, spaghetti code jungle.
The main goal is to transform a monolithic application into a microservices architecture.
It is not an easy task to refactor monoliths and it's not an overnight transformation.
It is a cultural, technical and organizational effort which paves the way to being cloud-native.
With the new microservices architecture, each modulr it's owned independent and separate application.
The ratings module will not be a problem anymore. Now that is fully independent, we can scale it up or down depending on the load from our customers.
Our services are now isolated from failure of other services because of the loose coupling and the end-to-end application will have more resilience since its different part can be monitored, changed, or rolled back easily.
In an ideal scenario, a microservice should have a single responsibility.
These issues we have to deal with in every microservice are called cross-cutting concerns. 
When coded into the microservice, they disrupt the main reason we designed the microservices to be able to have smaller, more independent pieces. 
This is known as the problem of fat microservices. Microservices are not a piece of cake.
There's a new approach for that called DevOps, where the development teams work closely with operations and together they take the responsibility of their microservices for deploying, monitoring and fixing. In the upcoming lesson, we will look at how service meshes can help solve these challenges with microservices.

## Service Mesh
Instead of admitting all the different requirements into each microservice, we replace them with a single proxy in the form of a sidecar container.
The proxies communicate with each other through what is known as a data plane and they communicate to a server site component called control plane.
Control plane manages all the traffic into and out of your services by proxies, so all the networking logic is abstracted from your business code. This approach is known as a service mesh. 
It is a dedicated and configurable infraestructure layer that handles the communication between services without having to change the code in a microservice architecture.
With the service mesh, you can dynamically configure how services talk to each other. When services talk to one another, you'll have mutual TLS, so you workloads can be secure. You can see things better.

## Istio
Istio is a free and open-source service mesh that provides an efficient way to secure, connect, and monitor services. Istio works with kubernetes and traditional workloads, thereby bringing universalt traffic management, telemetry and security to complex deployments.